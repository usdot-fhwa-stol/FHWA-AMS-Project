#include <cmath>

// Sigmoid function
double Sigmoid(double x, double k, double d1) {
    return 1.0 / (1.0 + exp(-k * (x - d1)));
}

// Calculate acceleration for each piece
double CalcAccel(double vf, double v_delta, double d, int piece) {
    switch (piece) {
        case 1:
            return -5.6226 - 0.79831 * vf + 0.24575 * v_delta + 0.50558 * d;
        case 2:
            return -4.6795 - 0.027768 * vf + 0.25227 * v_delta + 0.090712 * d;
        case 3:
            return -4.8431 - 0.024813 * vf + 0.24804 * v_delta + 0.090502 * d;
        case 4:
            return 5.4891 - 3.6667 * vf - 2.9898 * v_delta + 2.0431 * d;
        default:
            return 0; // Default case
    }
}

// NewModel function with smoothed transitions
double NewModel(double vf, double v_delta, double d) {
    const double w = 1;
    const double k = 2;
    const double bp1 = 9.793;
    const double bp2 = 9.507;
    double value, a_hat1, a_hat2, x;
    bool smooth = false;

    if (vf < bp1 - w && v_delta < bp2 - w) {
        // Piece 1
        value = CalcAccel(vf, v_delta, d, 1);
    } else if (vf < bp1 - w && v_delta >= bp2 + w) {
        // Piece 2
        value = CalcAccel(vf, v_delta, d, 2);
    } else if (vf >= bp1 + w && v_delta < bp2 - w) {
        // Piece 3
        value = CalcAccel(vf, v_delta, d, 3);
    } else if (vf >= bp1 + w && v_delta >= bp2 + w) {
        // Piece 4
        value = CalcAccel(vf, v_delta, d, 4);
    } else {
        // Smooth transitions
        smooth = true;
        if (vf < bp1 - w && v_delta >= bp2 - w && v_delta < bp2 + w) {
            // Transition between Piece 1 and Piece 2 (A)
            a_hat1 = CalcAccel(vf, bp2 - w, d, 1);
            a_hat2 = CalcAccel(vf, bp2 + w, d, 2);
            x = v_delta;
        } else if (vf >= bp1 + w && v_delta >= bp2 - w && v_delta < bp2 + w) {
            // Transition between Piece 3 and Piece 4 (B)
            a_hat1 = CalcAccel(vf, bp2 - w, d, 3);
            a_hat2 = CalcAccel(vf, bp2 + w, d, 4);
            x = v_delta;
        } else if ((vf >= bp1 - w && vf < bp1 + w) && v_delta >= bp2 + w) {
            // Transition between Piece 1 and Piece 3 (C)
            a_hat1 = CalcAccel(bp1 - w, v_delta, d, 2);
            a_hat2 = CalcAccel(bp1 + w, v_delta, d, 4);
            x = vf;
        } else if ((vf >= bp1 - w && vf < bp1 + w) && v_delta < bp2 - w) {
            // Transition between Piece 2 and Piece 4 (D)
            a_hat1 = CalcAccel(bp1 - w, v_delta, d, 1);
            a_hat2 = CalcAccel(bp1 + w, v_delta, d, 3);
            x = vf;
        } else {
            // Smoots_vfhed transition for all four pieces
            double A = CalcAccel(bp1 - w, bp2 - w, d, 1);
            double B = CalcAccel(bp1 + w, bp2 - w, d, 3);
            double C = CalcAccel(bp1 + w, bp2 + w, d, 4);
            double D = CalcAccel(bp1 - w, bp2 + w, d, 2);
            value = 0.25 * (A + B + C + D);
            return value;
        }
    }

    if (smooth) {
        double s = Sigmoid(x, k, (x < bp1) ? bp2 : bp1);
        value = a_hat1 + (a_hat2 - a_hat1) * s;
    }

    return value;
}
